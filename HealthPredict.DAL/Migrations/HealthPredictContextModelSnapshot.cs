// <auto-generated />
using System;
using HealthPredict.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthPredict.DAL.Migrations
{
    [DbContext(typeof(HealthPredictContext))]
    partial class HealthPredictContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthPredict.Models.Alerta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FECHA_CREACION");

                    b.Property<DateTime?>("FechaLectura")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FECHA_LECTURA");

                    b.Property<DateTime?>("FechaResolucion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FECHA_RESOLUCION");

                    b.Property<bool>("Leida")
                        .HasColumnType("boolean")
                        .HasColumnName("LEIDA");

                    b.Property<string>("NotasResolucion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("NOTAS_RESOLUCION");

                    b.Property<bool>("Resuelta")
                        .HasColumnType("boolean")
                        .HasColumnName("RESUELTA");

                    b.Property<string>("Severidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("SEVERIDAD");

                    b.Property<string>("TipoAlerta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TIPO_ALERTA");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO_ID");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ALERTAS", (string)null);
                });

            modelBuilder.Entity("HealthPredict.Models.DatoVital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DispositivoOrigen")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DISPOSITIVO_ORIGEN");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FECHA_REGISTRO");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("NOTAS");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TIPO_DATO");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UNIDAD");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO_ID");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("VALOR");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("DATOS_VITALES", (string)null);
                });

            modelBuilder.Entity("HealthPredict.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Altura")
                        .HasColumnType("numeric")
                        .HasColumnName("ALTURA");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("APELLIDO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("EsProfesionalMedico")
                        .HasColumnType("boolean")
                        .HasColumnName("ES_PROFESIONAL_MEDICO");

                    b.Property<string>("Especialidad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ESPECIALIDAD");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FECHA_NACIMIENTO");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FECHA_REGISTRO");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("GENERO");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("NumeroLicencia")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NUMERO_LICENCIA");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PASSWORD");

                    b.Property<decimal>("Peso")
                        .HasColumnType("numeric")
                        .HasColumnName("PESO");

                    b.Property<DateTime>("UltimoAcceso")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ULTIMO_ACCESO");

                    b.HasKey("Id");

                    b.ToTable("USUARIOS", (string)null);
                });

            modelBuilder.Entity("HealthPredict.Models.Alerta", b =>
                {
                    b.HasOne("HealthPredict.Models.Usuario", "Usuario")
                        .WithMany("Alertas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ALERTAS_USUARIOS");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HealthPredict.Models.DatoVital", b =>
                {
                    b.HasOne("HealthPredict.Models.Usuario", "Usuario")
                        .WithMany("DatosVitales")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DATOS_VITALES_USUARIOS");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HealthPredict.Models.Usuario", b =>
                {
                    b.Navigation("Alertas");

                    b.Navigation("DatosVitales");
                });
#pragma warning restore 612, 618
        }
    }
}
